{105}  -*-  mode: text; fill-column: 50;  -*-
[0:

Sun Oct 15 08:48:55 2023 OK, starting this file,
202310150848-T2-SERCON-notes.txt, in
(T2-SERCON/)T2-12/base/notes, for work on the
SERIAL CONCENTRATOR portion of the T2 MATRIX BRAIN
CHALLENGE.

[1:

Sun Oct 15 08:54:04 2023 First point to notice is
that we expect that ultimately the BBG SERCON
board software will be incompatible with the T2
tile because (at the very least) of differing pin
assignments.

So we don't expect this to be a 'pure install'
whatever that might mean.

:1]

:0]
[2:

Sun Oct 15 09:06:28 2023 So okay; starting into
stuff. First up,

base/doc/T2-12-BBG-Pinout-225-10.pdf

where (we believe) we have the current pin
assignments for a T2 tile. All full of ITC pins
that we won't use for SERCON and some of which
will conflict with UART pins for sure..[3:

Sun Oct 15 09:10:51 2023 (Not sure where to find
the source for that PDF, though.. that's
aggravating.)

:3]


:2]
[4:

Sun Oct 15 16:05:22 2023

P9_24 UART1_TXD
P9_26 UART1_RXD

P9_21 UART2_TXD
P9_22 UART2_RXD

P9_11 UART4_RXD
P9_13 UART4_TXD

P8_37 UART5_TXD
P8_38 UART5_RXD

:4]
[5:

Sun Oct 15 23:14:31 2023 HEY WAIT A MINUTE.

What about doing daisy chain loops through
multiple tile UARTs? If we're really claiming low
speed is fine due to timelapse, what about:

(1) Packetize everything, and
(2) Include a hop count in every packet, and
(3) Link a bunch of tiles in a TX->RX loop, 
(4) With a single 'terminal' node in each loop

Could have the controller poll the loop in fact,
since it will be both upstream and downstream of
the loop. Inject a sequence 'HOP-n SPEAK NOW'
packets for cyclic n, and enumerate the loop
that way.

Can be 'full duplex' by making SPEAK NOW actually
be 'RECEIVE AND SEND NOW'.

GAH then we could even maybe have the western edge
T2 tiles be the 'terminals', routing traffic from
ethernet to the serial loop it controls. And then
- aside from some extra load on the west tiles -
we don't even need any more BeagleBones. Just a 10
or 16 port ethernet switch, or whatever.

Or we could add a few 'loose' T2 tiles anywhere
around the periphery, and have them be just the
loop terminals, and connect to ethernet, so the
main load is shifted off the matrix entirely.

And then we only need a single UTP pair to run
around the loop? And we could make a little PCB
that would plug into the T2 serial port and accept
the passing pair. GND for everybody, plus an
upstream RX that becomes the downstream TX.

We could also have the loop provide an FTDI style
header so we could go straight to USB and byass
ethernet as well. If we trust say even a
half-dozen FTDI cables to coexist through a USB
hub.
[6:

Mon Oct 16 01:43:46 2023 Apparently the BBG
default baud rate is 115,200. So we imagine that's
about 10KB/s. If we said like 250 byte packet max,
and one packet per tile per poll, that's 4 packets
per KB so 40 packets per 10KB so we could in
principle update 40 tiles per second with a single
loop. Two loops could cover the whole existing
matrix.

We might be able to standardize the wire length
between the tiles - with some slack built in - and
then just daisy-chain a single pair soldered down
onto an incredibly simple PCB.

Or even, I suppose, crimped directly into 6
position 0.1" female headers.

[7:

Mon Oct 16 01:55:59 2023 FTDI USB-serial cable
pinout is:

  PIN 1 GND (black)
  PIN 2 CTS (brown)
  PIN 3 VCC (red)
  PIN 4 TXD (orange)
  PIN 5 RXD (yellow)
  PIN 6 RTS (green)

and with our single pair (say blue and white)
we'd do

 WHITE to PIN 1
 BLUE UPSTREAM to PIN 5
 BLUE DOWNSTREAM to PIN 4

and that's freaking it.

[8:

Mon Oct 16 02:10:56 2023 And if we wanted to go
with two pairs we could have a return line so it
didn't actually have to loop.

We could also just have a little jumper so if we
needed more cable on a particular hop we could
jumper PIN 5 to PIN 4 and then leave that PCB
unplugged-in.

:8]

:7]

:6]
:5]
[9:

Tue Oct 17 01:46:14 2023 (From 202310150204-fresh,
also now in sched11:TODO10

TODO:
 - Test circuit with 2 tiles + FTDI
[85: Sat Oct 28 11:30:01 2023
DONE  :85] - Find out how to take over /dev/ttyO0 from getty
[86:
DONE :86] - Get some right angle 6-pos 0.1" sockets
[87:
DONE :87] - Make three drops out of perfboard
[88:
DONE :88] - wire up
[99: Thu Jan  4 12:09:09 2024
DONE :99] - connect two to tiles and one to ftdi
 - write router script for tiles
 - write controller script for laptop
[89:
DONE :89] - demo packet communication


:9]
[10:

Tue Oct 17 01:47:21 2023 So we see this:

    I found the answer here;
    http://stackoverflow.com/questions/21596384/cannot-disable-systemd-serial-getty-service

    My port is at ttyO0. so in my case I entered
    "systemctl mask serial-getty@ttyO0.service"

    I was able to confirm the device name by
    typing “systemctl --full”. My device was in
    the list.

    Once I typed the command above and rebooted, I
    could use the serial port in my program.


:10]
[11:

Tue Oct 17 09:05:16 2023 But there's that whole
business with 'somebody' renaming /dev/ttyO0 to
/dev/ttyS0 during boot so now I'm trying both

    systemctl mask serial-getty@ttyO0.service
    systemctl mask serial-getty@ttyS0.service

..rebooting..

[12:

Tue Oct 17 09:40:32 2023 OK so that kinda seems to
work. I guess maybe could start an actual little
script? 

Can we claim any to-dos in sched11 first?
[13:

Tue Oct 17 09:52:51 2023 Well took a couple, and
reorged the sheet a bit. There's a lot that we
don't think we're going to do now; have to ditch
them at some point.[14:

Tue Oct 17 09:54:09 2023 Making
T2-12/base/apps/sercon/spike10.pl
[15:

Tue Oct 17 10:19:18 2023 Geez. Trying python.
Perl's Device::Serial seems an awful mess.

# apt install python-serial

[16:

Tue Oct 17 10:27:52 2023 aaand a first serial
non-blocking read / write demo in python is now
working. Bad show perl; I'm sad.

(In python 2.7.16.. to be exact. [17:

Tue Oct 17 10:36:02 2023 OK now with

    # apt install python3-serial

we're in python 3.7.3 and that'll have to do. Say
I.

[18:

Tue Oct 17 10:36:57 2023 OK. So how are we going
to delimit our packets this time?

(1) \n delimited and escape \n and escape
(2) null delimited and escape null and escape
(3) p255 counted with no escaping

[19:

Tue Oct 17 10:48:58 2023 Just as a reminder, the
ITC packet protocol uses 0x7e == 0b01111110 as the
packet delimiter and bit-stuffs a 0 after a 5th
consecutive 1 bit otherwise. 

There is no length encoded on the wire, but
packets are limited to 255 bytes and are mostly
queued and transferred in p255 format internally.

The ITC protocol self-synchronizes to byte
boundaries, but the UARTs will do that for us so
we don't need that here.

[20:

Tue Oct 17 10:56:35 2023 Suppose we go with option
(1) as simple and ample? (Plus p255.)

What do we use for escape? NUL? Actual ESC (033)?

Let's go with ESC for now.

So. Packet reading and writing in python?

Now, let's think about this just a minute. We're
ultimately going to need the content of these
packets to affect mfmt2 processing. How are we
going to do that? Via the filesystem? Pipe? Shmem?

Or do we want to byte (hoho) the bullet and switch
to C/C++ now?

[21:

Tue Oct 17 13:07:10 2023 Well, now I'm thinking
about making a little RAM disk for python and
mfmt2 to communicate through. I looked at unix
pipes but I don't really want to screw around with
streams and draining pipes and so on. For this
application I just want python to be able to
update 'sensor' readings asynchronously, and mfmt2
be able to update 'motor' commands asynchronously,
and each just takes the latest available at the
time they want them.
[22:

Tue Oct 17 15:33:43 2023 I really like that idea.
Fuck shared memory, use a ramdisk.[23:

Tue Oct 17 15:37:04 2023 Or, hmm, maybe 'ramfs' -
which is not the same thing - is better.[24:

Tue Oct 17 15:38:53 2023 And, hmm, maybe 'tmpfs'
is better still.. So how do we create [25:

Tue Oct 17 15:42:06 2023 Hmm, it's just

    $ mkdir /dev/shm/MYTMPFS
    $ echo foo >/dev/shm/MYTMPFS/file.txt
    $ ls -al /dev/shm/MYTMPFS
    total 4
    drwxrwxr-x 2 ackley ackley 60 Oct 17 15:43 .
    drwxrwxrwt 3 root   root   60 Oct 17 15:42 ..
    -rw-rw-r-- 1 ackley ackley  4 Oct 17 15:43 file.txt
    $

But how do we impose a size limit on that? I
thought the advantage of tmpfs was it supported
like a quota somehow?
[26:

Tue Oct 17 16:06:48 2023 Well, if we make our own
tmpfs we can enforce a quota, anyway. This works:

    # mkdir /mnt/T2TMP
    # mount -t tmpfs -o size=1M tmpfs /mnt/T2TMP/
    # yes >/mnt/T2TMP/yes.dat
    yes: standard output: No space left on device
    # df /mnt/T2TMP/
    Filesystem     1K-blocks  Used Available Use% Mounted on
    tmpfs               1024  1024         0 100% /mnt/T2TMP
    # rm /mnt/T2TMP/yes.dat 
    # df /mnt/T2TMP/
    Filesystem     1K-blocks  Used Available Use% Mounted on
    tmpfs               1024     0      1024   0% /mnt/T2TMP
    # 
[27:

Tue Oct 17 16:31:09 2023 And sticking

    none /mnt/T2TMP tmpfs size=1M,mode=1777 0 0

at the end of /etc/fstab seemed to work fine
across a reboot. But I guess somebody has to 

    # mkdir /mnt/T2TMP

once first..

[28:

Tue Oct 17 16:35:39 2023 So, anyway: I really like
this! We should move /cdm/log/status.txt there,
for one thing.

And if we had, sey

  /mnt/T2TMP/SERCON/sense.dat  # inbound sense data

that was written just by say python, and

  /mnt/T2TMP/SERCON/motor.dat  # outbound motor commands
  
that was written just by mfmt2, then all that
should happen lickety-split and without touching
eMMC except in the dire situation of swapping.

And we could write sense.new and then rename it
onto sense.dat, to ensure mfmt2 will never read
half-old half-new data?[29:

Wed Oct 18 10:04:28 2023 Actually I wonder if we
could just do that much, as a helpful step for
later and now, and actually push it to production?
[30:

Wed Oct 18 11:32:46 2023 TODO
[35: Thu Oct 19 08:58:07 2023 in base/files/etc
DONE :35] - Figure out where to set up /etc/fstab in cdm
[36: Thu Oct 19 13:23:53 2023 cdmss-05 -> /etc/fstab, so
DONE :36] - Create /mnt/T2TMP on boot if needed
[37: Thu Oct 19 13:25:18 2023 /mnt/T2TMP/cdmStatus.txt
DONE :37] - Move /cdm/log/status.txt to like
           /mnt/T2TMP/cdm/log/status.txt
[38:
DONE :38] - Test it
[39:
DONE :39] - Make cdmds
[40:
DONE :40] - Deploy
[41: Thu Oct 19 13:31:02 2023
DONE :41] - Commit

[31:

Wed Oct 18 11:46:31 2023 OK it appears that
systemd is supposed to create missing mount points
at boot, for stuff that's in /etc/fstab. I wonder
what the owner and permissions are?[32:

Wed Oct 18 11:55:54 2023 Looks like

(1) That works, and
(2) It's owned by root, and
(3) It has the permissions specified in
    /etc/fstab..


:32]

:31]
:30]
:29]


:28]

:27]


:26]
:25]

:24]

:23]

:22]
:21]

:20]

:19]

:18]

:17]

:16]

:15]

:14]

:13]

:12]

:11]
[33:

Thu Oct 19 07:46:57 2023 Evaluating header samples
I got in from Mouser:

SERLOOP J1 T FA (CES10602TSRA) ->
 Pretty short sockets
 But tight

SERLOOP J1 F RA (SSW10602FSRA) ->
 Longer sockets, seem plausible
 Gold flash on contact
 Tin tails
 Maybe

SERLOOP J1 G RA (SSW10602GSRA) ->
 Same plausible socket length
 Square tails
 Gold 0.51um on contact
 Gold flash on tail
 $$

[34:

Thu Oct 19 08:27:30 2023 So I think if we can find
a way to cut this bakelite at all cleanly, and
find or make a couple pieces of UTP to string up,
we could make like a three tab loop connecting two
tiles and an FTDI.

[42:

Thu Oct 19 13:50:47 2023 So, scoring and snapping
the bakelite works pretty well, so I now have
several pieces of a vaguely suitable size. What do
we do for UTP around here?

[43:

Thu Oct 19 14:15:28 2023 OK, cutting into an old
Cat5e cable. 24AWG; got to be vast overkill for my
purposes.. [44:

Thu Oct 19 14:17:48 2023 The blue/white pair seems
to have the tightest twist.

[45:

Thu Oct 19 14:21:38 2023 Aand how much length do
we want between tabs?
[46:

Thu Oct 19 14:30:39 2023 So like 4.5" would be
about the minimum for horizontal tile-to-tile, and
about the same for a NE<->SW diagonal shot.

Except: Both those horizontal and diago shots
would obscure the screen.

I think we'd be talking more like 8" for a safe
horizontal shot, considering termination and
routing costs.[47:

Thu Oct 19 15:16:08 2023 OK let's say 8". And what
exactly is our schematic here?

UG - upstream ground (WHITE)
US - upstream signal (COLOR)
DG - downstream ground (WHITE)
DS - downstream signal (COLOR)

J1

PIN1  GND
PIN2  NC
PIN3  NC
PIN4  TX
PIN5  RX
PIN6  NC

NETS

UG - PIN1 - DG
US - PIN5
DS - PIN4

and that's it, right?

[48:

Thu Oct 19 15:55:17 2023 And PIN1 is on the bottom
pin of the T2 tile serial port.

:48]

:47]

:46]

:45]

:44]

:43]
:42]

:34]
:33]
[49:

Fri Oct 20 12:25:07 2023 OK so how do we get going
here? Need more

TODO
[90: Sat Oct 28 11:27:43 2023 Long ago, but notes file reverted :(
 :90] - Document status
 - Make spike that handles two packets like S, M
[91: Sat Oct 28 11:29:14 2023
DONE :91] - Make a second serial loop tab
[94: Thu Jan  4 12:07:36 2024
DONE :94] - Make a serial controller tab
[95:
DONE :95] - Make a controller spike that enumerates the
   loop using S&M packets
[96:
DONE :96] - Demo two tile + controller
[97: Thu Jan  4 12:07:56 2024 
DONE :97] - Commit
 - Make more to-do

:49]
[50:

Fri Oct 20 12:32:31 2023 Current status:

 - Have /mnt/T2TMP tmps and loving it
 - Have one 'serial loop tab', untested.
 - Noting for the record: We installed
   python3-serial and that will need to get to all
   the tiles somehow. Probably need to figure out
   how to do a local installation maybe?
 - We have 'spike11.py' on the 'naked BBG' and
   currently nowhere else

:50]
[69: (Sun Dec 17 10:31:05 2023 There's a bunch of
notes in a different copy of this files that got
lost starting here. Sticking them all into the
next entry (:70:), while deleting their original 
numbering..) :69] 
[70:

Sat Oct 28 01:21:50 2023

p'ing'

p + 0xff

our received
cpu + ram
architecture
is a symphony
of premature
optimisation
and the
consequences of
not dealing with
that all too common
bug

the computational universe

'-' + TTL

tile configuration files
 expected loopsize
 represented as list
 of unified coordinates

packet to send
assigned coordinate
 and perhaps some
 kind of type
to a tile

Sat Oct 28 11:27:04 2023 OK, so now we're adding
and checking a two-byte checksum based on
binascii.crc_hqx.

Sat Oct 28 11:47:07 2023 So OK. Claimed some
to-dos. Let's load a tomli(key) file on the world
side and see about sending configurations.

Or just structured lines?

LOOPPOS XPOS YPOS RESERVEDIGNORED..

Let's try that. Thinking of including the LOOPPOS
rather than enumerating the lines; we'll see.

Sun Oct 29 00:22:41 2023 Let's think a bit about
the ways we're going to use space in this thing.
In particular, we think there's going to be
separate 'brain space' and 'body space', with a
mapping between them - that we want to represent,
at least in part, by this configuration file.

Do tiles really need to 'know where they are'?
Beyond whatever information we call 'the senses'?

Let's riff about how this might really all go.
Braitenberg on up.

Mon Oct 30 02:14:11 2023 Notes from yesterday:

    PROMPT: BRAIN-BODY INTERFACES

     - brightness signals as atoms
       carried from sim to sensory tile base layer
     - desired motor signals as atoms
       carried from motor tile base layer to sim

     - programmable matrix transforms and connects
       signals to motors

     - router gradients/clouds float

     - what if it was event counts rather
       than distance that got propagated?
       = then the decision about how to
         update is the focus.

     -> and event count isn't a time
        proxy anyway.

    several overlay networks intertwined
    various reductions offered while routing
    add/sub/max/min
    max/min/sample incr/decr/copy

      nw  ne
        ct
      sw  se


    when something goes wrong
    what happens
    what does it look like


    self-evidencing
    also data
    running the code

Mon Oct 30 02:19:03 2023 and the main takeaway
from that is the idea that we'll spread the
'Braitenberg API' out in space, and put a
programmable router between the components.

So rather than 'decide what to do then do it', it
will be more like 'decide what to do, then program
the lower-level (e.g., closer, better-connected,
more central) hardware to do it, then let that
programmed machine do its thing.

                   cont
                   roll
                   er

                nw     ne
        cont       rou       cont
        roll       ter       roll
        er      sw     se    er

                 here be
                 dragons

Mon Oct 30 09:36:32 2023 We want to be aware of

(1) Inhibition as well as excitation
(2) Which may be canceling or non-canceling in the
    fabric (?)

Mon Oct 30 11:02:37 2023 So how might we go?

Mon Oct 30 11:12:39 2023 I see
https://github.com/ankiitgupta7/Simulations-of-Braitenberg-Vehicles
has apparently a Processing-based simulator. That
might be a good start.

Mon Oct 30 14:10:39 2023 Well, after running into
this:

    java.lang.UnsatisfiedLinkError: Can't load library: /data/ackley/PART4/code/processing-4.3/natives/linux-amd64/libgluegen_rt.so
            at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2398)
            at java.base/java.lang.Runtime.load0(Runtime.java:755)

despite the existence of this

    /data/ackley/PART4/code/processing-4.3/core/library/linux-amd64/libgluegen_rt.so

plus the non-existence of this

    /data/ackley/PART4/code/processing-4.3/natives

makes me think maybe I don't want to be screwing
around with processing, let alone java, let alone
python somehow laid on top of processing on top of
java, to be using that repo code directly.

If I'm going to go that low-level - e.g.,
implementating all the physics myself - I might as
well start with some cleaner base.

Could I conceivably want to deliver via WASM? So
other 'agents' could use the framework? But still
that's low-level

Mon Oct 30 16:15:38 2023 Well I cloned and built
'box2d' and ran ./build/bin/testbed successfully.

Sun Nov  5 00:30:48 2023 Well, have now also
explored - to varying degrees - blender, pybullet,
and mujoco. So far mujoco has the inside
track. I've modified the included car.xml demo to
add a light that casts shadows, and demonstrated a
touch sensor, but have not as yet figured out how
to do a light sensor successfully. A challenge is
much documentation is for mujoco-py, which is now
apparently not being maintained, and the official
replacement python package 'mujoco', is
lower-level and has fewer tutorials and so forth.

But that's going to have to be it for the T2 brain
challenge for a while. It's November and time to
produce the collected works of Vaughn Joy Mannon.

[71: (Sun Dec 17 10:34:21 2023 End of inserted
  stuff) :71]
  :70]
[51:

Tue Dec 12 01:00:22 2023 OK I guess we're back,
here. I'm wondering if we should get these notes
and such pushed off the keymaster somewhere just
on general safety grounds, before developing too
much further.[52:

Tue Dec 12 01:05:00 2023 OK, pushed.

:52]

:51]
[53:

Tue Dec 12 01:05:13 2023

TODO

[55: Fri Dec 15 09:12:43 2023
DONE :55] - review ../base/apps/sercon stuff
[65: Sun Dec 17 01:44:52 2023
DONE :65] - brainstorm on packet designs
[66: DONE  :66] - identify something close to minimal minimal
 - make to-do leading to packet demo

[54:

Tue Dec 12 12:18:57 2023 And let's put a foggen
clock on this: PACKET DEMO RUNNING ACROSS AT LEAST
TWO TILES BY FRIDAY DEC 15.

:54]

:53]
[56:

Fri Dec 15 09:12:51 2023 So, current status
includes:

 - base/apps/sercon committed and pushed on branch
   SERCON
 - sercon/worldserloop.py runs on workstation
 - sercon/t2serloop.py runs on keymaster
 - they exchange packets
 - the packets are currently content-free

[57:

Fri Dec 15 09:29:15 2023 So I guess we're super
overdue to brainstorm packet designs.

BRAAAAINSTOOOOORMM PACKET DESIGNS

 - first byte always 'relative loop hops'
 - treat as signed byte?
   = 0x00 -> you are the recipient of this command (no hops)
   = 0x01..0x3f -> recipient of command is this many hops downstream
     1..127
   = 0x10..0xfe -> reply has returned -this many hops
     -1..-127
   = ==0xff -> all tiles are recipient of this command

 - or maybe like +-1..125 for few more special codes
   = -126 -> return underflow, discard
   = +126 -> broadcast
   = +127 -> reserved, discard
   = -127 -> reserved, discard
   = -128 -> reserved, discard

[58:

Fri Dec 15 10:02:13 2023 Well suppose we believe
the '125' format for now.

[59:

Fri Dec 15 10:14:10 2023 How about some little
specific spikies to go for?

Actually, let's saber first.

:59]

:58]
:57]
:56]
[60:

Fri Dec 15 15:24:47 2023 Tasks for the loop:

 - Count the loop (not counting host)
   METHOD:
   1. host sends Ho=-1 packet with random data
   2. wait for matching random data return with Hi
   3. loop length is -Hi-1 or None if timeout

 - 'Synchronous' loop update
   METHOD:
   1. Buffer sensory data from world for all tiles
      on the current world tick
   2. Send out sensory data for each tile in 'downstream
      first' order: Ho==LEN-1, LEN-2, .., 0
   3. Tiles accept delivery of sense data and
      replace it with motor data
   4. Buffer motor data from all tiles as it
      arrives    
   5. Deliver all motor data to world on the
      current world tick
   6. Tick the world
   7. Sleep until time to do it again.

[61:

Fri Dec 15 16:48:19 2023 spikeHost:

1. Count the loop
2. Do 'synchronous loop update'
3. Bomb out on any problem

and wrap that in a spikeHostRunner.

And what do we do for a spike 'world'?

???

:61]

:60]
[62:

Sat Dec 16 09:07:56 2023 OK, so trying to get
worldserloop.py to do its two 'loop tasks'.
Wondering how we want to do state machine-ish
stuff and timeout stuff in this context.

I guess minimal minimal says just brute force it
for the next spike. Which I guess means just
straight line blocking code and we'll see what we
see. 

:62]
[63:

Sat Dec 16 23:50:55 2023 OK, so worldserloop.py
successfully counted the loop and got 1:

    root@lcf5820://data/ackley/PART4/code/D/T2-12/base/apps/sercon# ./worldserloop.py spikeconfig11.dat 
    3 CONFIG
     (0, '1', '2', ['more stuff bing bang'])
     (1, '2', '3', ['# bong'])
     (2, '33', '8', [])
    ACCBYTFOUND bytearray(b'\xfeCOUNT')
>>  LOOP LENGTH IS 1
    SENDDDD
    ACCBYTFOUND bytearray(b',\xff')
    WHANDLED bytearray(b',\xff')


[64:

Sun Dec 17 01:03:31 2023 But to go beyond that I'm
really feeling the pressure of needing a
functional world to ground this code.

How close are we to what we wanted for this past
Friday? 
[67:

Sun Dec 17 01:45:11 2023 OK we were supposed to
have a demo running on two tiles but at the moment
it's only on one tile plus the host. I'm actually
okay with leaving it that way for now, because the
main bits of getting onto two tiles are cdm stuff
and getting the t2serlooprunner installed and
started on boot.

:67]
:64]

:63]
[68:

Sun Dec 17 10:06:54 2023 Well, I feel like we have
to subgoal to fish or cut bait on mujoco. I'm
feeling anxious about python version hell, though,
and wondering if I should try to do this
exploration in a VM. Like perhaps in the ubuntu
22.04 VM I already have running for latex..

Let's try to find whatever notes we had from the
first attempt..

:68]
[72:

Sun Dec 17 16:21:25 2023 OK resurrected some notes
(into this file, :70: above) that had gotten lost
in version skews. There's more mujuco mentions,
but nothing terribly specific.[73:

Sun Dec 17 16:35:02 2023 Let's try taking a fresh
start at mujuco in a VM and see where we choke.

:73]

:72]
[74:

Mon Dec 18 04:59:34 2023

GAH FOGGEN VM NOTES:

 - 'minimal installation' takes longer than
   'normal'
 - give maybe 2-4GB RAM
 - give maybe 50GM disk (10GB not enough)
 - give maybe two cores (on Settings -> System -> Processor)
 - Settings -> Power -> Screen Blank -> never
# apt install virtualbox-guest-additions-iso virtualbox-guest-utils virtualbox-dkms
# apt install virtualbox-ext-pack
# apt install emacs-nox openssh-server
# poweroff
 - VB -> [machine] -> Settings
    -> System
       -> Processor(2) -> 2
          Enable PAE/NX
          Enable Nested VT-x/AMD-V
    -> Display
       -> Video memory 64 MB
       -> Graphics controller: VMSVGA
       -> Enable 3D acceleration
    -> Network -> Adapter 1 -> Enable network adapter
       -> Port Forwarding
          -> Name: SSH, proto: TCP, host port 2214 (etc), guest port 22
    -> Shared Folders
       -> Add
          -> Name, Path, Auto Mount, At

:74]
[75:

Mon Dec 18 13:42:17 2023 OK, finally thinking VM
UB2204Mujoco14 is working enough to try to
proceed. GAAAAAAH I hate VMs.

:75]
[76:

Mon Dec 18 13:56:33 2023 OK, trying to follow

https://colab.research.google.com/github/deepmind/mujoco/blob/main/python/tutorial.ipynb

even though I don't have or understand 'Colab'
[77:

Mon Dec 18 13:58:19 2023 No I'm not. Second step
involves python code including
'from google.colab import files'

Need to find another way.

:77]


:76]
[78:

Mon Dec 18 14:02:56 2023 Well, trying
https://pypi.org/project/mujoco/
even though pretty quickly it points at the google
colab thing.[79:

Mon Dec 18 14:08:09 2023

    ackley@ubmujoco14:~/PART4$ pip install mujoco
    Defaulting to user installation because normal site-packages is not writeable
    Collecting mujoco
      Downloading mujoco-3.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.4 MB)
         ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 5.4/5.4 MB 5.1 MB/s eta 0:00:00

    Collecting glfw
      Downloading glfw-2.6.4-py2.py27.py3.py30.py31.py32.py33.py34.py35.py36.py37.py38-none-manylinux2014_x86_64.w\
    hl (211 kB)
         ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 211.8/211.8 KB 1.6 MB/s eta 0:00:00
 ..

    Collecting typing_extensions
      Downloading typing_extensions-4.9.0-py3-none-any.whl (32 kB)
    Installing collected packages: pyopengl, glfw, typing_extensions, numpy, importlib_resources, fsspec, etils, a\
    bsl-py, mujoco
      WARNING: The script f2py is installed in '/home/ackley/.local/bin' which is not on PATH.
      Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-loca\
    tion.
    Successfully installed absl-py-2.0.0 etils-1.6.0 fsspec-2023.12.2 glfw-2.6.4 importlib_resources-6.1.1 mujoco-\
    3.1.0 numpy-1.26.2 pyopengl-3.1.7 typing_extensions-4.9.0
    ackley@ubmujoco14:~/PART4$ 

[80:

Mon Dec 18 14:23:49 2023 OK, so, inside the VM display..




:80]
:79]

:78]
[81:

Tue Dec 19 13:08:15 2023 OK, so working towards
getting a second tile running t2serloop.py.
Current issue is second tile still had getty
running on tty0 and that fucked things up.

Trying a reboot on the second tile to see if that
fixes it ho ho so pro.

:81]
[82:

Tue Dec 19 13:12:29 2023 OK so it fixed it and now

    root@lcf5820://data/ackley/PART4/code/D/T2-12/base/apps/sercon# ./worldserloop.py spikeconfig11.dat 
    3 CONFIG
     (0, '1', '2', ['more stuff bing bang'])
     (1, '2', '3', ['# bong'])
     (2, '33', '8', [])
    ACCBYTFOUND bytearray(b'\xfdLOOPCOUNT/9dHvBNQJ')
>>  LOOP LENGTH IS 2
    SENDDDD
    ACCBYTFOUND bytearray(b'+\xff')
    WHANDLED bytearray(b'+\xff')
 ..

Wahoo.

:82]
[83:

Wed Dec 20 13:12:36 2023 OK, an order for 100
revised T2 SerLoop 13 tabs is now underway at
OSHPark. It'll be 2024 before they show up, I
expect; we'll see.

:83]
[84:

Thu Jan  4 09:08:19 2024 OK, merging more changes
from skewed versions of this file, using new note
numbers but anachronistically old dats, gah..
[92:

Thu Jan  4 09:11:52 2024 OK, end, I think of new
note numbers with old dates.

Ugh. What I get for initially pulling a separate
work repo for the sercon stuff, instead of just
branching as god intended.

:92]
:84]
[93:

Thu Jan  4 12:07:02 2024 So okay.[98:

Thu Jan  4 12:08:32 2024 Claimed some to-do. Are
we at making up more?
[100:

Thu Jan  4 12:09:57 2024 Looks like maybe.[101:

Thu Jan  4 12:45:00 2024 I really thought we
already had some text leading to serloop talking
to a sim.. but I can't find it?[102:

Thu Jan  4 12:58:41 2024 OK, I think I was
thinking about this note (24) from
/data/ackley/PART4/code/D/PyBulletTime/notes/202312251028-notes.txt:

    So if we imagine a simulated reaction time of
    perhaps 100ms through the T2 brain. That's pretty
    damn fast in human terms but let's say.

    Now, apparently bullet physics is based on 60fps
    or 16.6ms / step, so we'd be talking 6 steps per
    sensorimotor loop. Something like:

    WORLD
     forever
       wait til 0%5 seconds o'clock
       recv current forces from spine
       read current senses from sim
       send current senses to spine
       write current forces to sim
       for six times
         capture frame for 60fps movie
         step sim

    SPINE
     forever
       wait til 1%5 seconds o'clock
       recv senses from world
       send forces to world
       send senses to brainstem while
       recv forces from brainstem

    BRAINSTEM
     forever
       wait for spinal packet
       recv senses from packet
       read forces from brain
       send forces to brainstem
       write senses to brain

[103:

Thu Jan  4 13:16:12 2024 So can we turn that into
some items? Maybe do some minutes first.[104:

Thu Jan  4 14:47:39 2024 OK

TODO
 - Checkpoint commit. Sub branch possibly
 - Spike out World.py from scratch
 - Spike out Spine.py from scratch
 - Settle on to-be-RAM-disk naming scheme
 - Draft some kind of representation (lines with
   space separated float?) for World<->Spine comm
 - Demo World and Spine communicating
 - Come make more to-do

:104]

:103]
:102]

:101]

:100]
:98]

:93]

