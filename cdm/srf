#!/usr/bin/perl -w

use strict;
use lib "/home/t2/T2-12/cdm/cdm";

use IO::Socket::UNIX;
use File::Basename;

use Constants qw(:all);
use T2Utils qw(:all);
use DP qw(:all);

use constant SOCKET_DIR => "/cdm/sockets";

my ($token, $route, @files) = @ARGV;
my $tagcount = int(rand(1<<16));
@files > 0 or die "Usage: $0 TOKEN [CLIENTROUTE FILE..]|[SERVERROUTE DIR]";

exit doServer() if atEndOfRoute($route);
exit doClient() if atStartOfRoute($route);
die "Bad route '$route'";

sub doClient {
    
    for my $file (@files) {
        -r $file && -f $file or die "'$file' is not a readable file";
    }

    my $cs = openClientSocket();
    for my $file (@files) {
        last unless srsend($cs,$file);
    }
    print $cs "BYE\n";
    print "CLOSING\n";
    sleep 1;
    closeSocket($cs);
    return 0;
}

sub doServer {
    die "Server Usage: $0 TOKEN SERVERROUTE DIR"
        unless @files == 1;
    my $dir = shift @files;
    die "Not a dir '$dir'" unless (-d $dir && -r $dir);
    my $ss = openServerSocket($dir);
    while (doServerXfer($ss,$dir)) { }
    closeSocket($ss);
    return 0;
}

sub doServerXfer {
    my $ssocket = shift || die;
    my $dir = shift || die;
    my $line = <$ssocket>;
    return DPSTD("EOF before close") unless defined($line);
    chomp $line;
    print "GOT '$line'\n";
    my ($cmd,@args) = split(/ /,$line);
    return DPSTD("Client disconnected, server quitting") if $cmd eq "BYE";
    return DPSTD("Bad command '$cmd-") unless $cmd eq "SEND";
    my ($tag,$hexbase,$length,$hexsum) = @args;
    return DPSTD("Bad args '".join(" ",@args)."'") unless defined($length);
    my $base = deHexEscape($hexbase);
    return sendFail($ssocket,$tag,"Bad filename '$hexbase'")
        if ($base =~ m!/! || $base eq "." || $base eq "..");
    
    my $destfile = "$dir/$base";
    # Shortcut existing matching files
    if (-r $destfile &&
        -s $destfile == $length &&
        hexChecksumWholeFile($destfile) eq $hexsum) {
        print $ssocket "STATUS $tag DONE $hexsum\n";
        DPSTD("ALREADY HAVE matching $destfile");
        return 1;
    }

    # No attempt to recover in-progress xfers or the like
    open(my $hdl, ">", $destfile) or
        return sendFail($ssocket,$tag,"Write:$!");
    print $ssocket "STATUS $tag READY\n";
    my $bytes = 0;
    while ($bytes < $length) {
        my $amt = min(1000, $length-$bytes);
        my $data;
        my $count = read $ssocket, $data, $amt;
        last if $count == 0;
        return sendFail($ssocket,$tag,"Unexpected EOF after $bytes")
            unless defined($data);
        print $hdl $data;
        $bytes += $count;
        DPSTD("AT $bytes OF $length");
    }
    return sendFail($ssocket,$tag,"Expected $length bytes got $bytes")
        if $bytes != $length;

    return sendFail($ssocket,$tag,"close:$!")
        unless close $hdl;
    
    my $newsum = hexChecksumWholeFile($destfile);
    return sendFail($ssocket,$tag,"Bad final checksum '$newsum'")
        unless $newsum eq $hexsum;
    DPSTD("RECEIVED $destfile $length");
    print $ssocket "STATUS $tag DONE $newsum\n";
    return 1;
}

sub sendFail {
    my $ssocket = shift||die;
    my $tag = shift; defined $tag || die;
    my $failmsg = shift||"";
    DPSTD("FAILING $tag: $failmsg");
    print $ssocket "STATUS $tag FAIL ".hexEscape($failmsg)."\n";
    return undef;
}

sub openClientSocket {
    my $path = SOCKET_DIR."/".PATH_SOCKETDIR_XFERSOCK;
    my $socket = IO::Socket::UNIX->new(
        Type => SOCK_STREAM(),
        Peer => $path,
        ) or die "new: $@";
    print $socket "$route\n";
    my $hextok = hexEscape($token);
    print $socket "HI $hextok\n";
    $| = 1;
    print "Waiting for contact..";
    my $reply = <$socket>;
    unless (defined $reply) {
        print " no contact, aborting\n";
        exit 2;
    }
    print "contact\n";
    chomp $reply;
    my @pieces = split(/ /,$reply);
    if (@pieces == 1 && $pieces[0] eq "NAH") {
        print "Server rejected '$token'\n";
        exit 3;
    }
    if (@pieces == 2 && $pieces[0] eq "YEAH" && $pieces[1] eq $hextok) {
        print "Connected via '$token $route'\n";
    }
    return $socket;
}       

sub openServerSocket {
    my $serverdir = shift || die;
    my $path = SOCKET_DIR."/".PATH_SOCKETDIR_XFERSOCK;
    my $socket = IO::Socket::UNIX->new(
        Type => SOCK_STREAM(),
        Peer => $path,
        ) or die "new: $@";
    print $socket "$route\n";
    $| = 1;
    print "Waiting for client $route $token...";
    my $reply = <$socket>;
    chomp $reply;
    my @pieces = split(/ /,$reply);
    return DPSTD("Bad reply $reply") unless @pieces == 2;
    my ($cmd,$hextok) = @pieces;
    return DPSTD("Bad '$cmd'") unless $cmd eq "HI";
    my $tok = deHexEscape($hextok);
    if ($tok eq $token) {
        print $socket "YEAH ".hexEscape($token)."\n";
    } else {
        print $socket "NAH\n";
        return DPSTD("Rejected bad token '$tok'");
    }
    return $socket;
}

sub closeSocket {
    my $socket = shift || die;
    close $socket or die "Can't close '$socket'";
}       

sub srsend {
    my $socket = shift || die;
    my $file = shift || die;
    -r $file or die;
    my $hexsum = hexChecksumWholeFile($file);
    my $base = basename($file);
    print "SENDING $file as $base\n";
    my $hexbase = hexEscape($base);
    my $length = -s $file;
    my $tag = ++$tagcount;
    print $socket "SEND $tag $hexbase $length $hexsum\n";
    my $reply = <$socket>;
    die "$file setup failed" unless defined $reply;
    chomp $reply;
    $reply =~ /^STATUS $tag (.+)$/ or die "got '$reply'";
    my @pieces = split(/ /,$1);
    if ($pieces[0] eq "DONE") {
        if ($pieces[1] eq $hexsum) {
            DPSTD("Server already has $base");
            return 1;
        }
        die "UNHANDLED '$pieces[0] $pieces[1]";
    }
    if ($pieces[0] ne "READY") {
        die "Can't send $hexbase: $reply";
    }
    open(my $hdl, "<", $file);
    my $count;
    my $bytes = 0;
    my $lastpct = 0;
    while (1) {
        my $data;
        $count = read $hdl, $data, 1024;
        last if $count == 0;
        print $socket $data;
        $bytes += $count;
        my $pct = int(100*$bytes/$length);
        if ($pct != $lastpct) {
            print "\rSENT $pct%";
            $pct = $lastpct;
        }
    }
    print "\n";
    close $hdl or die "close: $!";

    print "Waiting for confirmation..";
    $reply = <$socket>;
    unless (defined $reply) {
        print "EOF BEFORE TRANSFER COMPLETE\n";
        exit 5;
    }
    chomp $reply;
    print "..got '$reply'\n";
    $reply =~ /^STATUS $tag (.+)$/ or die "got '$reply'";
    my @repargs = split(/ /,$1);
    if (@repargs == 2 && $repargs[0] eq "DONE") {
        print "SUCCESS $tag $file $repargs[1]\n";
        return 1;
    }
    if (@repargs == 2 && $repargs[0] eq "FAIL") {
        my $msg = deHexEscape($repargs[1]);
        print "TRANSFER FAILED: $msg\n";
        exit 4;
    }
    die "wha";
}
