#!/usr/bin/perl -w  # -*- perl -*-
use strict;
use File::Basename;
use Cwd qw(abs_path);
use lib dirname (abs_path(__FILE__));

use Fcntl;
use File::Path qw(make_path remove_tree);
use File::Copy qw(move);
use File::Temp;
use Errno qw(EAGAIN);
use Time::HiRes;
use List::Util qw/shuffle/;
use Digest::SHA qw(sha512_hex);
use Data::Dumper;

use MFZUtils qw(:all);
use T2Utils qw(:all);
use Constants qw(:all);
use DeletedMap;
use DP qw(:all);

use warnings FATAL => 'all';
$SIG{__DIE__} = sub {
    die @_ if $^S;
    require Carp; 
    Carp::confess ;
};

my $KEY_DIR = "/root/.mfm";
SetKeyDir($KEY_DIR);

my ($BASE_DIR,$COMMON_DIR);
sub updateBaseDir {
    $BASE_DIR = shift;
    $COMMON_DIR = "$BASE_DIR/common";
}
updateBaseDir("/cdm");

my $CDM_INTERNAL_HANDLE = "t2-keymaster-release-10";
my $CDM_INTERNAL_REGNUM = "0";
my $DELETEDS_MFZ_NAME = undef; # DELETE ME
my $MFZRUN_PROGRAM = "/home/t2/MFM/bin/mfzrun";
my $MFZMAKE_PROGRAM = "/home/t2/MFM/bin/mfzmake";

my $VERBOSE = 1;

my %deletedsMap;
my $DEBUG_DIRS = 1;

sub makeTmpDir {
    my $template = "cdmctl-XXXXX";
    my $cleanup = 1;

    $cleanup = 0 
        if $DEBUG_DIRS;

    my $destdir =
        tempdir( $template,
                 TMPDIR => 1,
                 CLEANUP => $cleanup
        );
    return $destdir;
}

sub findDeletedMFZ {
    my $dir = $COMMON_DIR;
    my @files = grep { /^cdmss-01-.*[.]mfz$/ } listDir($dir);
    die "S01 not found in $dir -- possibly want 'initmap'?" if @files == 0;
    die "Multiple S01s found in $dir" if @files > 1;
    return ($files[0],$dir);
}

# returns instance of DeletedMap
sub loadDeletedMap {
    my ($mapfile,$indir) = findDeletedMFZ();

    my $mfzpath = "$indir/$mapfile";

    my $outer = LoadOuterMFZToMemory($mfzpath); 
    die $@ unless defined $outer;
    my $inner = LoadInnerMFZToMemory($outer); ## COUNTS ON SetKeyDir($basedir) ALREADY DONE
    die $@ unless defined $inner;   

    ## MFZ_PUBKEY_NAME handle is locally known valid as of now
    my $mfzSigningHandle = $inner->[4];
    my $innerpathsref = $inner->[3];

    my ($dmpath, $dmname, $dmtime, $dmdata) = FindName($innerpathsref,DELETEDS_MAP_NAME,undef);

    my $dmref = Packable::parse($dmdata);
    die $@ unless defined $dmref;
    die unless $dmref->isa('DeletedMap');
    
    return $dmref;
}

my $digester = Digest::SHA->new(256);

sub checksumWholeFileHex {
    my $path = shift;
    $digester->reset();
    $digester->addfile($path);
    my $cs = substr($digester->digest(),0,16);
    my $hexcs = unpack("H*",$cs);
    return $hexcs;
}

sub getMetadataOfMFZ {
    my $mfz = shift;
    my $path = "$COMMON_DIR/$mfz";
    my $cmd = "$MFZRUN_PROGRAM -kd $BASE_DIR $path VERIFY";
    print STDERR "Extracting metadata of $mfz.." if $VERBOSE;
    my $metadata = `$cmd`;
    print STDERR "done\n" if $VERBOSE;
    my $mref = {};
    while ($metadata =~ /([a-zA-Z_]+) \[([^]]+)\]/sg) {
        $mref->{$1} = $2;
    }
    $mref->{WHOLE_FILE_CHECKSUM} = checksumWholeFileHex($path);
    $mref->{FILE_SIZE} = -s $path;
    return $mref;
}

sub checkOrAddToMap {
    my $mfz = shift || die;
    my $dmref = shift || die;

    my $ss = SSFromPath($mfz);
    return DPSTD("Bad cdmss filename '$mfz'") unless defined $ss;

    my ($slot,$stamp) = (SSSlot($ss),SSStamp($ss));

    return DPSTD(sprintf("$mfz: Can't delete S%02x",$slot))
        if $slot == DELETED_SLOT_NUMBER;

    my ($nowstamp) = SSStampFromTime();
    
    return DPSTD(sprintf("$mfz: Can't delete future stamp %06x (vs %06x now)",$stamp,$nowstamp))
        if $stamp > $nowstamp;

    my $path = "$COMMON_DIR/$mfz";
    return DPSTD("No such file '$path'")
        unless -e $path;

    my $flagstamp = $dmref->{mFlagStampMap}->[$slot];

    my ($flags,$fstamp) = (SSSlot($flagstamp), SSStamp($flagstamp));
    
    if ($flags&DELETED_FLAG_SLOT_DELETED) {
        if ($fstamp >= $stamp) {
            DPSTD(sprintf("$mfz: S%02x already deleted through %06x, no change needed",$slot, $fstamp));
            return 0;
        }
        DPSTD(sprintf("$mfz: Updating S%02x deletion from %06x to %06x",$slot,$fstamp,$stamp));
    } else {
        $flags |= DELETED_FLAG_SLOT_DELETED;
        DPSTD(sprintf("$mfz: Marking S%02x deleted through %06x",$slot,$stamp));
    }
    $dmref->{mFlagStampMap}->[$slot] = SSMake($flags,$stamp);
    return 1;
}

sub saveDeletedMap {
    my DeletedMap $dmref = shift || die;
    die unless $dmref->{mRegnum} < 0; # Don't be already signed

    my $regnum = $CDM_INTERNAL_REGNUM;
    my $innertime = ZipTimeNow();
    
    $dmref->signDeletedMap($regnum,$innertime);

    my $slotnum = SSSlot($dmref->{mSigningSlotStamp});
    my $label = "Deleteds";
    my $destdir = $COMMON_DIR;  # 'Update' in place, so we'll fail if stamp doesn't change

    ## Make the .mfz, containing just the deletedmap
    my @files = ([DELETEDS_MAP_NAME, $dmref->{mPacketBytes}]);
    my $mfzpath = CDMakeMFZ($slotnum, $regnum, $label, $innertime, $destdir, @files);

    print "Updated to $mfzpath\n";
}

sub doListDeleted {
    my @args = @_;

    if (scalar(@args) > 0) {
        die "Usage: $0 listDeleted\n";
    }
    my $dmref = loadDeletedMap();
    my $len = 0;
    my ($invalid,$deleted) = (0,0);
    for (my $slotnum = 1; $slotnum < 256; ++$slotnum) {
        my $ss = $dmref->{mFlagStampMap}->[$slotnum];
        my $fn = SSToFileName($ss);
        my ($flags,$stamp) = (SSSlot($ss),SSStamp($ss));
        unless ($flags&DELETED_FLAG_SLOT_VALID) {
            print "$fn -- INVALID\n";
            ++$invalid;
        } elsif ($flags&DELETED_FLAG_SLOT_DELETED) {
            print "$fn\n";
            ++$deleted
        }
    }
    print $deleted." deleted, ".$invalid." invalid\n";
}

sub doInitMap {
    my @args = @_;
    my $confirm = "yesiamsure";
    if (scalar(@args) != 1 || $ARGV[0] ne $confirm) {
        print STDERR "Usage: $0 initmap $confirm\n";
        exit 1;
    }
    my $dmref = DeletedMap->new(); # Start invalid
    $dmref->init(); # init to an empty map
    saveDeletedMap($dmref);
    print "Released empty deleteds map\n";
}

sub doDelete {
    my @mfzs = @_;
    if (scalar(@mfzs) == 0 || scalar(grep { $_ !~ /[.]mfz$/ } @mfzs) > 0) {
        die "Usage: $0 delete cdmss-00-000000.mfz [cdmss-00-000000.mfz ...]\n";
    }

    my $dmref = loadDeletedMap();
    my $changes = 0;
    foreach my $mfz (@mfzs) {
        my $ret = checkOrAddToMap($mfz,$dmref);
        unless (defined $ret) {
            print "$@";
            print "Processing aborted\n";
            exit 1;
        }
        $changes += $ret;
    }
    if ($changes > 0) {
        $dmref->markChanged(); # Unsigns it
        saveDeletedMap($dmref);
    }
}

my %cmds = (
    "help" => \&doHelp,
    "delete" => \&doDelete,
    "listdeleted" => \&doListDeleted,
    "initmap" => \&doInitMap,
    );

sub doHelp {
    my @keys = sort keys %cmds;
    print "Commands are: ".join(" ",@keys)."\n";
    exit 3;
}

sub setBaseDirectory {
    my @args = @_;
    if (defined $args[0] && $args[0] eq "-bd") {
        shift @args;
        my $dir = shift @args;
        die "Missing/bad dir" unless defined $dir and -d $dir;
        updateBaseDir($dir);
    }
    return @args;
}

sub processArgs {
    push @ARGV, "help" unless scalar(@ARGV);
    @ARGV = setBaseDirectory(@ARGV);

    my $verb = shift @ARGV;
    my $code = $cmds{lc($verb)};
    return &$code(@ARGV) if defined $code;
    print "Unrecognized command '$verb'\n";
    doHelp();
}

sub main {
    processArgs();
}
main();
